digraph git_basics {

  "message" -> "simple-message"
  "message" -> "complex-message"

  "simple-message" -> "simple-start"
  "simple-message" -> "pattern"

  "simple-start" -> "simple-start-char"
  "simple-start" -> "text-escape"
  "simple-start" -> "placeholder"

  "pattern" -> "text-char"
  "pattern" -> "text-escape"
  "pattern" -> "placeholder"
  
  "placeholder" -> expression
  "placeholder" -> markup

  "complex-message" -> "declaration"
//  "complex-message" -> "s"
  "complex-message" -> "complex-body"

  "declaration" -> "input-declaration"
  "declaration" -> "local-declaration"
  "declaration" -> "reserved-statement"

  "complex-body" -> "quoted-pattern"
  "complex-body" -> "matcher"

  "input-declaration" -> input
//  "input-declaration" -> s
  "input-declaration" -> "variable-expression"

  "local-declaration" -> local
//  "local-declaration" -> s
  "local-declaration" -> variable
//  "local-declaration" -> EQUAL
  "local-declaration" -> expression

//  "quoted-pattern" -> "{{"
  "quoted-pattern" -> pattern
//  "quoted-pattern" -> "}}"

  matcher -> "match-statement"
//  matcher -> s
  matcher -> variant

  "match-statement" -> match
//  "match-statement" -> s
  "match-statement" -> selector

  selector -> expression

  variant -> key
//  variant -> s
  variant -> "quoted-pattern"

  key -> literal
//  key -> "*"

  expression -> "literal-expression"
  expression -> "variable-expression"
  expression -> "annotation-expression"

//  "literal-expression" -> "{"
//  "literal-expression" -> s
  "literal-expression" -> literal
  "literal-expression" -> annotation
  "literal-expression" -> attribute
//  "literal-expression" -> "}"
  
//  "variable-expression" -> "{"
//  "variable-expression" -> s
  "variable-expression" -> variable
  "variable-expression" -> annotation
  "variable-expression" -> attribute
//  "variable-expression" -> "}"
  
//  "annotation-expression" -> "{"
  "annotation-expression" -> annotation
//  "annotation-expression" -> s
  "annotation-expression" -> attribute
//  "annotation-expression" -> "}"

  annotation -> function
  annotation -> "private-use-annotation"
  annotation -> "reserved-annotation"

//  markup -> "{"
//  markup -> s
  markup -> "markup-open"
  markup -> attribute
//  markup -> "/"
//  markup -> "}"
  markup -> "markup-close"

//  "markup-open" -> "#"
  "markup-open" -> identifier
//  "markup-open" -> s
  "markup-open" -> option

//  "markup-close" -> "/"
  "markup-close" -> identifier

//  function -> ":"
  function -> identifier
//  function -> s
  function -> option

  option -> identifier
//  option -> s
//  option -> EQUAL
  option -> literal
  option -> variable

//  attribute -> "@"
  attribute -> identifier
//  attribute -> s
//  attribute -> EQUAL
  attribute -> literal
  attribute -> variable

//  variable -> "$"
  variable -> name
  
  literal -> quoted
  literal -> unquoted

//  quoted -> "|"
  quoted -> "quoted-char"
  quoted -> "quoted-escape"

  unquoted -> name
  unquoted -> "number-literal"
  
//  "number-literal" -> "0"
//  "number-literal" -> "1-9"
//  "number-literal" -> DIGIT
//  "number-literal" -> "."
//  "number-literal" -> "e"
//  "number-literal" -> "-"
//  "number-literal" -> "+"

  input -> ".input"
  local -> ".local"
  match -> ".match"

  "reserved-statement" -> "reserved-keyword"
//  "reserved-statement" -> s
  "reserved-statement" -> "reserved-body"
//  "reserved-statement" -> s
  "reserved-statement" -> expression
//  "reserved-keyword" -> "."
  "reserved-keyword" -> name

  "reserved-annotation" -> "reserved-annotation-start"
  "reserved-annotation" -> "reserved-body"
//  "reserved-annotation-start" -> "!"
//  "reserved-annotation-start" -> "%"
//  "reserved-annotation-start" -> "*"
//  "reserved-annotation-start" -> "+"
//  "reserved-annotation-start" -> "<"
//  "reserved-annotation-start" -> ">"
//  "reserved-annotation-start" -> "?"
//  "reserved-annotation-start" -> "~"

  "private-use-annotation" -> "private-start"
  "private-use-annotation" -> "reserved-body"
  
//  "private-start" -> "^"
//  "private-start" -> "&"
  
//  "reserved-body" -> s
  "reserved-body" -> "reserved-char"
  "reserved-body" -> "reserved-escape"
  "reserved-body" -> quoted

  identifier -> namespace
//  identifier -> ":"
  identifier -> name
  namespace -> name
  name -> "name-start"
  name -> "name-char"
// "name-start" -> ALPHA / "_"
//           / %xC0-D6 / %xD8-F6 / %xF8-2FF
//           / %x370-37D / %x37F-1FFF / %x200C-200D
//           / %x2070-218F / %x2C00-2FEF / %x3001-D7FF
//           / %xF900-FDCF / %xFDF0-FFFC / %x10000-EFFFF
  "name-char" -> "name-start"
//  "name-char" -> DIGIT
//  "name-char" -> "-"
//  "name-char" -> "."
//  "name-char" -> "abnf: %xB7 / %x300-36F / %x203F-2040"

  "simple-start-char" -> "content-char"
//  "simple-start-char" -> s
//  "simple-start-char" -> "@"
//  "simple-start-char" -> "|"
  
  "text-char" -> "content-char"
//  "text-char" -> s
//  "text-char" -> "."
//  "text-char" -> "@"
//  "text-char" -> "|"
  
  "quoted-char" -> "content-char"
//  "quoted-char" -> s
//  "quoted-char" -> "."
//  "quoted-char" -> "@"
//  "quoted-char" -> "{"
//  "quoted-char" -> "}"
  
  "reserved-char" -> "content-char"
//  "reserved-char" -> "."

// "content-char"      -> %x00-08        ; omit HTAB (%x09) and LF (%x0A)
//                   / %x0B-0C        ; omit CR (%x0D)
//                   / %x0E-19        ; omit SP (%x20)
//                   / %x21-2D        ; omit . (%x2E)
//                   / %x2F-3F        ; omit @ (%x40)
//                   / %x41-5B        ; omit \ (%x5C)
//                   / %x5D-7A        ; omit { | } (%x7B-7D)
//                   / %x7"E-D"7FF      ; omit surrogates
//                   / %xE000-10FFFF

  "text-escape" -> backslash
//  "text-escape" -> "{"
//  "text-escape" -> "}"

  "quoted-escape" -> backslash
//  "quoted-escape" -> "|"

  "reserved-escape" -> backslash
//  "quoted-escape" -> "{"
//  "quoted-escape" -> "|"
//  "quoted-escape" -> "}"
//  backslash -> "\\"

  s -> SP
  s -> HTAB
  s -> CR
  s -> LF
  s -> "U+3000"
}
